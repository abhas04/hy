
https://github.com/Deepak-B-G/CDSS
**************************
9.}
C program to implement the FIRST in context free grammar Code: 

#include<stdio.h> 
#include<ctype.h> 
#include<stdlib.h> 
void FIRST(char); 
int count,n=0; 
char prodn[10][10],first[10]; 
void main() 
{ 
int i,choice; 
char c,ch; 
printf("Enter the number of productions: "); 
scanf("%d",&count); 
printf("Enter %d productions:\nEpsilon=$\n",count); for(i=0;i<count;i++) 
scanf("%s%c",prodn[i],&ch); 
do{
n=0; 
printf("Element :"); 
scanf("%c",&c); 
FIRST(c); 
printf("\nFIRST(%c)={",c); 
for(i=0;i<n;i++) 
printf(" %c",first[i]); 
printf("}\n"); 
printf("Press 1 to continue :"); 
scanf("%d%c",&choice,&ch); 
} 
while(choice==1); 
} 
void FIRST(char c) 
{ 
int j; 
if(!(isupper(c)))first[n++]=c; 
for(j=0;j<count;j++) 
{ 
if(prodn[j][0]==c) 
{ 
if(prodn[j][2]=='S')first[n++]='$'; 
else if(islower(prodn[j][2]))first[n++]=prodn[j][2]; else FIRST(prodn[j][2]); 
} 
} 
} 


****** OUTPUT *******

enter the number of production : 8
enter 8 productions:
Epsilon=$

E=TD
D=+TD
D=$
T=FS
S=*FS
S=$
F=(E)
F=a
Element : E

FIRST(E)={ (a}
Press 1 to continue: 1
element: D

FIRST(E)={ + $}
Press 1 to continue: 1
element: T

FIRST(E)={ ( a}
Press 1 to continue: 1
element: S

FIRST(E)={ * $}
Press 1 to continue: 0

******************************************************
10.}
program to implement Shift Reduce Parser for the given grammar: E → E+E 
E → E*E 
E →(E) 
E→ id 
Code: 

#include<stdio.h> 
#include<string.h> 
int k=0,z=0,i=0,j=0,c=0; 
char a[16],ac[20],stk[15],act[10];
void check(); 
int main() 
{ puts("GRAMMAR is E->E+E \n E->E*E \n E->(E) \n E->id"); puts("enter input string "); 
gets(a); 
c=strlen(a); 
strcpy(act,"SHIFT->"); 
puts("stack \t input \t action"); 
printf("\n$\t%s$\t---",a); 
for(k=0,i=0; j<c; k++,i++,j++) 
{ if(a[j]=='i' && a[j+1]=='d') 
{ stk[i]=a[j]; 
stk[i+1]=a[j+1]; 
stk[i+2]='\0'; 
a[j]=' '; 
a[j+1]=' '; 
printf("\n$%s\t%s$\t%sid",stk,a,act); 
check(); 
} 
else 
{ stk[i]=a[j]; 
stk[i+1]='\0'; 
a[j]=' '; 
printf("\n$%s\t%s$\t%ssymbols",stk,a,act); 
check(); } 
} 
} 
void check() 
{ 
strcpy(ac,"REDUCE TO E");
for(z=0; z<c; z++) 
if(stk[z]=='i' && stk[z+1]=='d') 
{ stk[z]='E'; 
stk[z+1]='\0'; 
printf("\n$%s\t%s$\t%s",stk,a,ac); 
j++; 
} 
for(z=0; z<c; z++) 
if(stk[z]=='E' && stk[z+1]=='+' && stk[z+2]=='E') { stk[z]='E'; 
stk[z+1]='\0'; 
stk[z+2]='\0'; 
printf("\n$%s\t%s$\t%s",stk,a,ac); 
i=i-2; 
} 
for(z=0; z<c; z++) 
if(stk[z]=='E' && stk[z+1]=='*' && stk[z+2]=='E') { stk[z]='E'; 
stk[z+1]='\0'; 
stk[z+1]='\0'; 
printf("\n$%s\t%s$\t%s",stk,a,ac); 
i=i-2; 
} 
for(z=0; z<c; z++) 
if(stk[z]=='(' && stk[z+1]=='E' && stk[z+2]==')') { stk[z]='E'; 
stk[z+1]='\0'; 
stk[z+1]='\0'; 
printf("\n$%s\t%s$\t%s",stk,a,ac); 
i=i-2;
} } 


**** OUTPUT ****
 id+id*id
 
******************************************************
11.}

C program to implement code optimization techniques. 
Code: 
FOR LOOP: 
#include<stdio.h> //using for loop 
int main() 
{int i,fact=1,number; 
printf("Enter a number: "); 
scanf("%d",&number); 
for(i=1;i<=number;i++){ 
fact=fact*i; 
}printf("Factorial of %d is: %d",number,fact); 
return 0;}
RECURSION: 
#include<stdio.h> // using Recursion long factorial(int n) 
{if (n == 0) 
return 1; 
else 
return(n * factorial(n-1)); 
} 
void main() 
{int number; 
long fact; 
printf("Enter a number: "); 
scanf("%d", &number); 
fact = factorial(number); 
printf("Factorial of %d is %ld\n", number, fact); return 0; 
} 
DO WHILE: 
#include<stdio.h> // using do-while loop void main() 
{int n,i=1,f=1; 
printf("\n Enter The Number:"); 
scanf("%d",&n); 
do 
{f=f*i; 
i++; 
}while(i<=n); 
printf("\n The Factorial of %d is %d",n,f);
} 

**Output:**
 
FOR LOOP: 


*****************************************************


