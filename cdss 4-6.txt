https://github.com/Deepak-B-G/CDSS

*********************************
4.}
Program to evaluate arithmetic expression involving operators +, -, *, / Code: 

//lex code

%{ 
#include "y.tab.h" 
extern yylval; 
%} 
%% 
[0-9]+ {yylval=atoi(yytext);return num;} 
[\+\-\*\/] {return yytext[0];} 
[)] {return yytext[0];} 
[(] {return yytext[0];} 
. {;} 
\n {return 0;} 
%% 



//yacc code 

%{#include<stdio.h> 
#include<stdlib.h> 
%} 
%token num 
%left '+''-' 
%left '*''/' 
%% 
input:exp {printf("%d\n",$$);exit(0);} 
exp:exp'+'exp {$$=$1+$3;} 
|exp'-'exp {$$=$1-$3;} 
|exp'*'exp {$$=$1*$3;} 
|exp'/'exp {if($3==0){printf("Division by zero\n");exit(0);}  else 
$$=$1/$3;} 
|'('exp')' {$$=$2;} 
|num {$$=$1;};
%% 
int yyerror() 
{ 
printf("error"); 
exit(0); 
} 
int main() 
{ 
printf("Enter the expression:\n"); 
yyparse(); 
} 

 **** output ****

//lex yacc execution //

gedit 4.l
gedit 4.y

lex 4.l
yacc -d 4.y
cc lex.yy.c y.tab.c -lfl
./a.out

2+4
6

5*6
30
***********************************************
5 }
Program to recognize a valid variable which starts with a letter, followed by any  number of letter or digits 
Code: 

//lex code 

%{ 
#include "y.tab.h" 
%} 
%% 
[a-zA-z] return L; 
[0-9] return D;
%% 



//yacc code 

%{ 
#include<stdio.h> 
#include<stdlib.h> 
%} 
%token L D 
%% 
var:L E {printf("Valid Variable\n"); return 0;} E:E L; 
|E D; 
| ; 
%% 
int main() 
{ 
printf("Type the variable\n"); 
yyparse(); 
return 0; 
} 
int yyerror() 
{ 
printf("Invalid Variable\n"); 
exit(0); 
} 

**** output ****

gedit p5.l
gedit p5.y

lex p5.l
yacc -d p5.y
cc lex.yy.c y.tab.c -lfl
./a.out

type the variable :
abc123
123jkl

**********************************************
6.}

Program to recognize the strings using the grammar (anbn; n>=0) Code: 

//lex code 

%{ 
#include "y.tab.h" 
%} 
%% 
a return A; 
b return B; 
. return yytext[0]; 
\n return yytext[0]; 
%% 



//yacc code 

%{ 
#include<stdio.h> 
#include<stdlib.h> 
%} 
%token A B 
%% 
Str:S '\n' {return 0;} 
S:A S B;
| ; 
%% 
int main() 
{ 
printf("Type the string\n"); 
if (!yyparse()) 
printf("Valid String\n"); 
return 0; 
} 
int yyerror() 
{ 
printf("Invalid String\n"); 
exit(0); 
} 


**** output ****

gedit p6.l
gedit p6.y

lex p6.l
yacc -d p6.y
cc lex.yy.c y.tab.c -lfl
./a.out


aabb
aabc

**********************************************
